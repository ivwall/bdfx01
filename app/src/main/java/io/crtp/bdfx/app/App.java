/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.crtp.bdfx.app;

import io.crtp.bdfx.list.LinkedList;

import static io.crtp.bdfx.utilities.StringUtils.join;
import static io.crtp.bdfx.utilities.StringUtils.split;
import static io.crtp.bdfx.app.MessageUtils.getMessage;

import org.apache.commons.text.WordUtils;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.bitcoinj.utils.BlockFileLoader;
import org.bitcoinj.core.NetworkParameters;
import org.bitcoinj.core.Block;
import org.bitcoinj.core.PrunedException;
import org.bitcoinj.core.Transaction;
import org.bitcoinj.core.Context;
import org.bitcoinj.core.ECKey;
import org.bitcoinj.params.MainNetParams;
import org.bitcoinj.store.BlockStoreException;
import org.bitcoinj.core.Transaction;
import org.bitcoinj.core.TransactionOutput;
import org.bitcoinj.script.ScriptChunk;
import org.bitcoinj.core.Address;
import org.bitcoinj.script.Script;
import org.bitcoinj.script.Script.ScriptType;

import org.bitcoinj.core.Base58;
import org.bitcoinj.core.Sha256Hash;

import java.security.MessageDigest;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import java.security.Security;


import java.io.File;
import java.util.ArrayList;  
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.text.SimpleDateFormat;
import java.util.Locale;

import java.text.SimpleDateFormat;

public class App {

    private static final Logger log = LoggerFactory.getLogger(App.class);

    static {
        Security.addProvider(new BouncyCastleProvider());
    }

    static MainNetParams params = MainNetParams.get();

    public static void main(String[] args) {

        String PREFIX = "../blocks/";

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy MM dd HH:mm:ss");

        List<File> blockChainFiles = new ArrayList<>();
        blockChainFiles.add(new File("../blocks/blk00000.dat"));
        //blockChainFiles.add(new File("../blocks/blk00001.dat"));
        //MainNetParams params = MainNetParams.get();
        Context context = new Context(params);
        BlockFileLoader bfl = new BlockFileLoader(params, blockChainFiles);

        List<Transaction> trxs = null;
        Transaction trx = null;
        List<TransactionOutput> trxOutputs = null;
        TransactionOutput trxOut = null;
        Script script = null;
        Address address = null;

        /****
        List<File> list = new LinkedList<File>();
        for (int i = 0; true; i++) {
            //File file = new File(PREFIX + String.format(Locale.US, "blk%05d.dat", i));
            File file = new File(PREFIX + String.format(Locale.US, "rev%05d.dat", i));
            if (!file.exists())
                break;
            list.add(file);
        }
        BlockFileLoader bfl = new BlockFileLoader(np, list);
          */
        //BlockFileLoader bfl = new BlockFileLoader(np, buildList());

        List<ScriptChunk> scriptChunks = null;
        List<java.security.interfaces.ECKey> ecKeyList = null;
        String scriptType = null;

        // Iterate over the blocks in the dataset.
        int blkNum = 0;
        for (Block block : bfl) {
            log.debug("");
            log.debug("- - - - - - - - - - - - - - - - - - - - - - - - ");
            log.debug("");
            try {
                //System.out.println(block.getHashAsString());
                log.debug( "block number " + blkNum );
                blkNum++;
                log.debug( block.getHashAsString() );
                log.debug( "block date time "+sdf.format(block.getTime()) );
                trxs = block.getTransactions();
                log.debug( "num of trxs "+trxs.size() );
                //log.debug( "block.toString = " + block.toString() );

                log.debug("= = = = = = = = = = = = = = = = = = = = = = = = = = = = = =");

                for( int x=0; x<trxs.size() ; x++ ) {

                    log.debug( "trx "+x);
                    trx = trxs.get(x);
                    //log.debug( "   "+trx.toString());

                    log.debug("+ + + + + + + + + + + + + + + + + + + + + + +");

                    trxOutputs = trx.getOutputs();
                    log.debug("trxOutputs.size "+trxOutputs.size());
                     
                    for ( int z=0; z < trxOutputs.size(); z++ ) {

                        log.debug( "z =  " + z );

                        ScriptType st = trx.getOutput( z ).getScriptPubKey().getScriptType();

                        if ( st == null ) {

                            log.debug("script == null");

                        } else {

                            scriptType = trx.getOutput( z ).getScriptPubKey().getScriptType().toString();
                            //log.debug( "trx.getOutput(" + z + ").getScriptType() " + scriptType);

                            if ( scriptType.equalsIgnoreCase("P2PK") ) {

                                //log.debug( "if (scriptType.equalsIgnoreCase(P2PK)) {  <-----" );
                                scriptChunks = trx.getOutput( z ).getScriptPubKey().getChunks();
                                String chunkZero = ""+scriptChunks.get( z );

                                //log.debug( "trx.getOutput(" + z + ") " + trx.getOutput( z ).toString());
                                trxOutputs = trx.getOutputs();
                                //log.debug( "trxOutputs.size " + trxOutputs.size() );

                                for ( int y=0; y < trxOutputs.size(); y++ ) {

                                    log.debug( " y " + y );
                                    trxOut = trxOutputs.get( y );
                                    script = trxOut.getScriptPubKey();
                                    chunkZero = script.toString();
                                    log.debug( "   >>> script.toString " + chunkZero );

                                    int leftBracket = chunkZero.indexOf("[");
                                    int rightBracket = chunkZero.indexOf("]");
                                    String pubKey = chunkZero.substring(leftBracket+1, rightBracket);
                                    log.debug("pubKey "+pubKey);

                                    try {
                                        String addr = addressFromPubKey(pubKey);
                                        log.debug("addr "+addr);
                                    }catch(Exception ex){
                                        log.debug("addr ex "+ex.toString());
                                    }

                                }

                            //TODO: use enumeration types
                            } else if ( scriptType.equalsIgnoreCase("P2PKH") ) { 

                                //log.debug( "} else if ( scriptType.equalsIgnoreCase( _P2PKH_ ) ) {   <--------" );
                                //log.debug( "trx.getOutput(" + z + ") " + trx.getOutput( z ).toString() );
                                trxOutputs = trx.getOutputs();
                                //log.debug("trxOutputs.size "+trxOutputs.size());

                                for( int y=0; y<trxOutputs.size(); y++ ) {

                                    log.debug( " y " + y );
                                    trxOut = trxOutputs.get( y );

                                    ScriptType scriptTypeEnum =  trx.getOutput( y ).getScriptPubKey().getScriptType();
                                    //log.debug( "scriptTypeEnum " + scriptTypeEnum.toString() );

                                    //TODO : big redundancy!!!
                                    if ( scriptTypeEnum == Script.ScriptType.P2PKH ) {

                                        log.debug("scriptTypeEnum == Script.ScriptType.   __P2PKH__");

                                        script = trxOut.getScriptPubKey();
                                        //log.debug( "   >>> script.toString " + script.toString() );
                                        /*****
                                        try {
                                            address = script.getToAddress( params );
                                            log.debug( "   >>> address.toString " + address.toString() );
                                        }catch(Exception exx){
                                            log.debug("address exception "+exx.toString());
                                        }
                                         */
                                        log.debug( "found addr " + script_getToAddress( script ) );

                                    //TODO : big redundancy!!!!
                                    } else if ( scriptTypeEnum == Script.ScriptType.P2PK ) {

                                        log.debug("scriptTypeEnum == Script.ScriptType.   __P2PK__");
                                        script = trxOut.getScriptPubKey();
                                        if ( script == null ) {

                                            log.debug( "   !!! script is NULL " );

                                        } else {

                                            //log.debug( "   >>> script.toString " + script.toString() );

                                            scriptChunks = trx.getOutput( y ).getScriptPubKey().getChunks();
                                            String chunkZero = ""+scriptChunks.get( y );
                                                    
                                            trxOut = trxOutputs.get( y );
                                            script = trxOut.getScriptPubKey();
                                            chunkZero = script.toString();
                                            //log.debug( "   >>> script.toString " + chunkZero );
            
                                            int leftBracket = chunkZero.indexOf("[");
                                            int rightBracket = chunkZero.indexOf("]");
                                            String pubKey = chunkZero.substring(leftBracket+1, rightBracket);
                                            log.debug("pubKey "+pubKey);
            
                                            try {
                                                String addr = addressFromPubKey(pubKey);
                                                log.debug("addr "+addr);
                                            }catch(Exception exx){
                                                log.debug("address exception "+exx.toString());
                                            }

                                        }

                                    }
                                }
                            } else {

                                log.debug("} else {  <-------");
                                //log.debug("trx.getOutput("+x+") "+trx.getOutput(x).toString());
                                trxOutputs = trx.getOutputs();
                                log.debug("trxOutputs.size "+trxOutputs.size());

                                for( int y=0; y < trxOutputs.size(); y++ ) {

                                    //log.debug( " y " + y );
                                    trxOut = trxOutputs.get( y );
                                    script = trxOut.getScriptPubKey();
                                    //log.debug( "   >>> script.toString " + script.toString() );
                                    
                                    /*****
                                    try {
                                        address = script.getToAddress( params );
                                        log.debug( "   >>> address.toString " + address.toString() );
                                    }catch(Exception exx){
                                        log.debug("address exception "+exx.toString());
                                    }
                                     */

                                    log.debug( "found addr " + script_getToAddress( script ) );
                                }
                            }
                        }
                    }
                }

                //if ( blkNum == 71200 ) {
                //    System.exit(0);
                //}

            } catch(Exception ex) {
                log.debug("error "+ex.toString());
            }
        }
    }

    public static String script_getToAddress( Script script ) {
        String addressStr = "not set";
        try {
            addressStr = script.getToAddress( params ).toString();
            //addressStr = address.toString();
            //log.debug( "   >>> address.toString " + addressStr );
        }catch(Exception exx){
            log.debug("address exception "+exx.toString());
        }
        return addressStr;
    }



    /***
     * 
     */
    //public String addressFromPubKey( String a ){
    public static String addressFromPubKey( String a ){
        String result = "addr not found";
        try {
            //System.out.println("learn me btc: https://learnmeabitcoin.com/technical/hash-function");
            //https://gobittest.appspot.com/Address
            byte[] iti = hexStringToByteArray(a);
            Sha256Hash itiHash = Sha256Hash.of(iti);

            MessageDigest rmdx = MessageDigest.getInstance("RipeMD160", "BC");
            byte[] r1x = rmdx.digest(itiHash.getBytes());
            //Converting the byte array in to HexString format
            StringBuffer hexString = new StringBuffer();
            for (int i = 0;i<r1x.length;i++) {
                hexString.append(Integer.toHexString(0xFF & r1x[i]));
            }

            byte[] zero = hexStringToByteArray("00");
            byte[] s5 = new byte[r1x.length + 1];
            s5[0] = zero[0];
            System.arraycopy(r1x, 0, s5, 1, r1x.length);
            
            Sha256Hash s5x = Sha256Hash.of(s5);
            Sha256Hash s6x = Sha256Hash.of(s5x.getBytes());

            byte[] first4of6 = new byte[4];
            System.arraycopy(s6x.getBytes(), 0, first4of6, 0, 4);

            byte[] s8 = new byte[s5.length + first4of6.length];

            System.arraycopy(s5, 0, s8, 0, s5.length);
            System.arraycopy(first4of6, 0, s8, s5.length, first4of6.length);

            //7 - First four bytes of 6
            result = Base58.encode(s8);
        } catch(Exception ex) {
            System.out.println("address_From_Pub_Key  "+ex.toString());
            ex.printStackTrace();
        }
        return result;
    }

    /* s must be an even-length string. */
    //https://stackoverflow.com/questions/140131/convert-a-string-representation-of-a-hex-dump-to-a-byte-array-using-java/140861#140861
    /***
     * 
     */
    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                                + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

}
